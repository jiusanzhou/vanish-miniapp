{"version":3,"sources":["apps/checkin.jsx","apps/debugger.jsx","apps sync /^/.//.*$","utils/serviceWorker.js","utils/global.jsx","pages/app.jsx","pages/home.jsx","pages/404.jsx","App.jsx","stores/appStore.js","stores/index.js","styles/theme.js","index.js"],"names":["CheckinApp","React","Component","DebuggerApp","state","res","input","script","document","createElement","src","async","id","body","appendChild","getElementById","remove","e","this","setState","target","value","eval","exception","w","size","onChange","handleInputChange","bind","mt","onClick","handleRunClick","mb","style","wordWrap","JSON","stringify","map","webpackContext","req","webpackContextResolve","__webpack_require__","o","Error","code","keys","Object","resolve","module","exports","Boolean","window","location","hostname","match","EventBusContext","createContext","Provider","Consumer","withGlobal","WrappedComponent","GlobalBus","globalData","props","GlobalProvider","homepage","require","data","basePath","URL","pathname","children","AppPage","withRouter","appCaches","app","name","default","title","Text","AppPreview","history","push","icon","Flex","_onClick","cursor","border","borderRadius","borderColor","h","align","justify","direction","Icon","my","HomePage","inject","Box","p","Grid","templateColumns","gap","appStore","apps","idx","key","NotFoundPage","addCount","App","observer","loadApps","exact","path","component","mockApps","isLoading","appsRegistry","clear","forEach","item","set","text","Array","from","values","observable","computed","action","theme","colors","brand","900","800","700","ReactDOM","render","stores","ThemeProvider","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b0e1ff77.chunk.js","sourcesContent":["import React from \"react\"\n\n\n\nclass CheckinApp extends React.Component {\n    constructor() {\n        super()\n    }\n\n    render() {\n        return \"打卡签到\"\n    }\n}\n\nexport default CheckinApp","import React from \"react\"\nimport { Box, Button, Text, Code, Textarea } from \"@chakra-ui/core\"\n\nclass DebuggerApp extends React.Component {\n    constructor() {\n        super()\n        this.state = {\n            res: \"\",\n            input: \"\",\n        }\n    }\n\n    componentWillMount() {\n        const script = document.createElement(\"script\")\n        script.src = \"https://cdnjs.cloudflare.com/ajax/libs/firebug-lite/1.4.0/firebug-lite.js\"\n        script.async = true\n        script.id = \"firebug_lite_js\"\n        document.body.appendChild(script)\n    }\n\n    componentWillUnmount() {\n        document.getElementById(\"firebug_lite_js\").remove()\n    }\n\n    handleInputChange(e) {\n        this.setState({input: e.target.value})\n    }\n\n    handleRunClick() {\n        let res\n        try { res = eval(this.state.input) } catch(e) { res = { exception: e } }\n        this.setState({res})\n    }\n\n    render() {\n        return <Box>\n            <Text>调试应用</Text>\n            <Textarea w=\"200px\" size=\"sm\" value={this.state.input} onChange={this.handleInputChange.bind(this)} />\n            <Button mt=\"8px\" onClick={this.handleRunClick.bind(this)}>运行</Button>\n            <Text mb=\"8px\">执行结果：</Text>\n            <Code w=\"100%\" style={{wordWrap:\"break-word\"}}>{this.state.res?JSON.stringify(this.state.res):null}</Code>\n        </Box>\n    }\n}\n\nexport default DebuggerApp","var map = {\n\t\"./checkin\": 61,\n\t\"./checkin.jsx\": 61,\n\t\"./debugger\": 62,\n\t\"./debugger.jsx\": 62\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 80;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\"\nimport PropTypes from 'prop-types'\n\nconst EventBusContext = React.createContext({})\nconst Provider = EventBusContext.Provider\nconst Consumer = EventBusContext.Consumer\n\nexport { Provider }\nexport { Consumer }\n\n// TODO: multi toasts\n\nexport const withGlobal = (WrappedComponent) => {\n    class WithGlobal extends React.Component {\n        render() {\n            return (\n                <Consumer>\n                    {GlobalBus => <WrappedComponent globalData={GlobalBus} {...this.props} />}\n                </Consumer>\n            )\n        }\n    }\n\n    return WithGlobal\n}\n\nexport class GlobalConsumer extends React.Component {\n    return() {\n        return <Consumer>{GlobalBus => children(GlobalBus)}</Consumer>\n    }\n}\n\nGlobalConsumer.propTypes = {\n    children: PropTypes.func.isRequired\n}\n\nexport class GlobalProvider extends React.Component {\n    constructor() {\n        super()\n        \n        let homepage = require(\"../../package.json\").homepage\n\n        this.data = {\n            basePath: homepage?(new URL(homepage)).pathname:\"\",\n        }\n    }\n\n    render() {\n        const { children } = this.props\n        return <Provider value={this.data}>{children}</Provider>\n    }\n}\n\nGlobalProvider.propTypes = {\n  children: PropTypes.oneOfType([PropTypes.node, PropTypes.arrayOf(PropTypes.node)])\n}","import React from \"react\"\nimport { Flex, Icon, Text } from \"@chakra-ui/core\"\nimport { withRouter } from \"react-router-dom\"\nimport { withGlobal } from \"../utils/global\"\n\n// import CheckinApp from \"../apps/checkin\"\n// import Debugger from \"../apps/Debugger\"\n\n@withRouter\nclass AppPage extends React.Component {\n\n    constructor() {\n        super()\n    }\n\n    appCaches = {}\n\n    componentWillMount() {\n        let app\n        try { app = require(`../apps/${this.props.name}`).default } catch(e) {}\n        if (app) this.appCaches[this.props.name] = app\n\n        // 更新title等\n        window.document.title = this.props.title\n    }\n\n    render() {\n        let app = this.appCaches[this.props.name]\n        if (app) return React.createElement(app)\n        return <Text>应用错误: {this.props.name}</Text>\n    }\n}\n\n@withRouter\n@withGlobal\nclass AppPreview extends React.Component {\n\n    _onClick() {\n        this.props.history.push(`${this.props.globalData.basePath}/${this.props.name}`)\n    }\n\n    render() {\n        let { title, name, icon = \"time\" } = this.props\n        return <Flex\n        onClick={this._onClick.bind(this)}\n        cursor=\"pointer\"\n        border=\"1px\" borderRadius=\"md\" borderColor=\"gray.300\"\n        w=\"100%\" h=\"20\"\n        align=\"center\" justify=\"center\" direction=\"column\">\n            <Icon name={icon} />\n            <Text my={1}>{title}</Text>\n        </Flex>\n    }\n}\n\nexport { AppPreview }\n\nexport default AppPage","import React from \"react\"\nimport { inject } from \"mobx-react\"\n\nimport { Grid, Box } from \"@chakra-ui/core\"\n\nimport { AppPreview } from \"./app\"\n\n@inject(\"appStore\")\nclass HomePage extends React.Component {\n\n    componentWillMount() {\n        window.document.title = \"Vanish 小程序\"\n    }\n\n    // 显示app列表\n    render() {\n        return <Box p={2}>\n            <Grid templateColumns=\"repeat(3, 1fr)\" gap={6}>\n                {this.props.appStore.apps.map((app, idx) => <AppPreview key={idx} {...app} />)}\n            </Grid>\n        </Box>\n    }\n}\n\nexport default HomePage","import React from \"react\"\nimport { inject } from \"mobx-react\"\n\nimport { Flex, Button } from \"@chakra-ui/core\"\n\nclass NotFoundPage extends React.Component {\n\n    constructor() {\n        super()\n    }\n\n    _onClick() {\n        this.props.appStore.addCount()\n    }\n\n    render() {\n        return <Flex>\n            Chakra UI! 404\n        </Flex>\n    }\n}\n\nexport default NotFoundPage","import React from \"react\"\nimport { Switch, Route, BrowserRouter, withRouter } from \"react-router-dom\"\nimport { inject, observer } from \"mobx-react\"\n\nimport HomePage from \"./pages/home\"\nimport AppPage from \"./pages/app\"\nimport NotFoundPage from \"./pages/404\"\nimport { withGlobal } from \"./utils/global\"\n\n@withRouter\n@withGlobal\n@inject(\"appStore\")\n@observer\nexport default class App extends React.Component {\n\n    constructor() {\n        super()\n    }\n\n    componentDidMount() {\n        // load apps\n        this.props.appStore.loadApps()\n    }\n\n    render() {\n        let basePath = this.props.globalData.basePath\n        return <Switch>\n            <Route exact path={basePath||'/'} children={<HomePage />} />\n            {this.props.appStore.apps.map((app, idx) => <Route key={idx} path={`${basePath||''}/${app.name}`} children={<AppPage basePath={basePath} {...app} />} />)}\n            <Route component={NotFoundPage} />\n        </Switch>\n    }\n}","// app storage\nimport { observable, action, computed } from 'mobx'\n\nconst mockApps =  [\n    { name: 'checkin', icon: \"time\", title: \"打卡签到\" },\n    { name: 'debugger', icon: \"view\", title: \"JS调试\" },\n]\n\nexport class AppStore {\n    @observable isLoading = false\n    // we store app at here with id\n    @observable appsRegistry = observable.map()\n\n    @computed get apps() {\n        // FIXME:\n        return Array.from(this.appsRegistry.values())\n    }\n\n    @action loadApps() {\n        this.isLoading = true\n\n        this.appsRegistry.clear()\n\n        // loads apps from server\n        // store app at here or we need to extact some things like settings and routers?\n\n        // store in registry, if then need call action\n        mockApps.forEach(item => this.appsRegistry.set(item.name, {id: item.name, text: item.title, ...item}))\n\n        this.isLoading = false\n    }\n}\n\nexport default new AppStore()","import appStore from \"./appStore\"\n\nexport default {\n    appStore\n}","import { theme } from \"@chakra-ui/core\"\n\n// custom theme\nexport default {\n    ...theme,\n    colors: {\n        ...theme.colors,\n        brand: {\n            900: \"#1a365d\",\n            800: \"#153e75\",\n            700: \"#2a69ac\",\n        }\n    }\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from \"react-router-dom\"\nimport { Provider } from \"mobx-react\"\nimport { ThemeProvider } from \"@chakra-ui/core\"\n\nimport * as serviceWorker from './utils/serviceWorker'\n\nimport App from \"./App\"\n\nimport stores from \"./stores\"\nimport { GlobalProvider } from './utils/global'\n\nimport \"./styles/core.css\"\nimport theme from \"./styles/theme\"\n\nReactDOM.render(<Provider {...stores}>\n    <ThemeProvider theme={theme}>\n        <GlobalProvider>\n            <BrowserRouter>\n                <App />\n            </BrowserRouter>\n        </GlobalProvider>\n    </ThemeProvider>\n</Provider>, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}